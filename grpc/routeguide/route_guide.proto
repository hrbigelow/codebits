syntax = "proto3";

option go_package = "google.golang.org/grpc/examples/route_guide/routeguide";

package routeguide;

service RouteGuide {
  // Obtains the feature at a given position.
  rpc GetFeature(Point) returns (Feature) {}

  // Obtains the features available within a given rectangle.  Results are streamed
  // rather than returned at once (e.g. in a response message with a repeated
  // field), as the rectangle may cover a large area and contain a huge number of
  // features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // Accepts a stream of Points on a Route being traversed, returning a RouteSummary
  // when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // Accepts a stream of RouteNotes sent while a route is being traversed, while
  // receiving other RouteNotes (e.g. from other users). 
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as Latitude/Longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).  Latitudes
// should be in the range +/- 90 degrees and Longitudes should be in the range +/-
// 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite points
// "lo" and "hi"
message Rectangle {
  Point lo = 1;
  Point hi = 2;
}

// A Feature names something at a given point.  If a feature could not be named,
// the name is empty.
message Feature {
  string name = 1;
  Point location = 2;
}

// A RouteNote is a message sent while at a given point
message RouteNote {
  // The location from which the message is sent
  Point location = 1;

  // the message to be sent
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of detected
// features, and the total distance covered as the cumulative sum of the distance
// between each point.
message RouteSummary {
  // The number of points received
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in meters
  int32 distance = 3;

  // The duration of traversal in seconds
  int32 elapsed_time = 4;
}

